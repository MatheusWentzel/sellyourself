/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.wentzel.views;

import br.com.wentzel.controller.UtilControler;
import br.com.wentzel.persistencia.clauses.Where;
import br.com.wentzel.persistencia.main.PDAO;
import br.com.wentzel.persistencia.main.PObjectDAO;
import br.com.wentzel.util.UtilTable;
import br.com.wentzel.util.UtilValid;
import java.util.ArrayList;
import javax.swing.JTable;

/**
 *
 * @author Matheus
 */
public abstract class ConsultaCad extends javax.swing.JDialog {

    /**
     * Creates new form ConsultaCad
     */
    private PObjectDAO object;
    private PDAO dao;
    private String[] columns;
    private String[] criterios;
    private ArrayList<String[]> values;

    public ConsultaCad(java.awt.Frame parent, boolean modal, PObjectDAO object, PDAO dao) {
        super(parent, modal);
        initComponents();

        this.object = object;
        this.dao = dao;
        this.columns = UtilControler.returnColumns(object); //Retorna as colunas do objeto
        this.criterios = UtilControler.returnTouchStone(object); //Retorna os critérios do objeto
        this.values = UtilControler.returnValues(dao.select(this.object), columns, this.object);  //Retorna os valores da consulta

        updateTable(values, columns);
        updateCombo(this.criterios);
        
//=        this.object = null;

    }

    //Construtor padrão
    public ConsultaCad(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    private void updateTable(ArrayList<String[]> array, String[] columns) {

        //Seta os valores da Consulta na table
        jtTabela = UtilTable.setValues(
                jtTabela,
                array,
                columns
        );

        configTable();

    }

    private void updateCombo(String[] values) {

        Criterio.removeAllItems();

        for (int i = 0; i < criterios.length; i++) {
            Criterio.addItem(criterios[i]);
        }

    }

    public abstract void configTable();

    public Object getObject() {
        return object;
    }

    public void setObject(PObjectDAO object) {
        this.object = object;
    }

    public JTable getJtTabela() {
        return jtTabela;
    }

    public void setJtTabela(JTable jtTabela) {
        this.jtTabela = jtTabela;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jsTabela = new javax.swing.JScrollPane();
        jtTabela = new javax.swing.JTable();
        Criterio = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Id = new javax.swing.JTextField();
        Filtro = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jtTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTabelaMouseClicked(evt);
            }
        });
        jsTabela.setViewportView(jtTabela);

        Criterio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Cod.:");

        Id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IdKeyReleased(evt);
            }
        });

        Filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FiltroKeyReleased(evt);
            }
        });

        jLabel2.setText("Filtro:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Criterio, 0, 244, Short.MAX_VALUE))
                            .addComponent(Filtro))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Criterio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jsTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void IdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IdKeyReleased
        
        //Valida se Id.getText é um número válido
        if (UtilValid.isNumeric(Id.getText())) {
            this.values = UtilControler.returnValues(dao.selectId(object, Id.getText()), columns, this.object);
            updateTable(values, columns);
        } else {
            this.values = UtilControler.returnValues(dao.select(object), columns, this.object);
            updateTable(values, columns);
        }

    }//GEN-LAST:event_IdKeyReleased

    private void FiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FiltroKeyReleased

        //Valida se existe texto no filtro
        if (!Filtro.getText().equals("")) {
            this.values = UtilControler.returnValues(
                    dao.select(
                            object, 
                            new Where(UtilControler.returnWhereTouchStone(object, Criterio.getSelectedIndex()) + Filtro.getText().toUpperCase() + "%'")), 
                    columns, 
                    this.object);
//            this.values = UtilControler.returnValues(dao.select(Criterio.getSelectedIndex(), Filtro.getText()), columns, this.object);
            updateTable(values, columns);
        } else {
            this.values = UtilControler.returnValues(dao.select(object), columns, this.object);
            updateTable(values, columns);
        }

    }//GEN-LAST:event_FiltroKeyReleased

    private void jtTabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTabelaMouseClicked

        if (evt.getClickCount() > 1) {
            int rowSelected = jtTabela.getSelectedRow();

            if (UtilValid.isNumeric((String) jtTabela.getModel().getValueAt(rowSelected, 0))) {
                String idSelected = (String) jtTabela.getModel().getValueAt(rowSelected, 0);

                if (dao.selectId(object, idSelected) instanceof ArrayList) {
                    object = (PObjectDAO) dao.selectId(object, idSelected).get(0);
                } else {
                    System.err.println("Erro ao retornar o objeto!");
                }

                dispose();

            }

        }

    }//GEN-LAST:event_jtTabelaMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        object = null;
        
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaCad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConsultaCad dialog = new ConsultaCad(new javax.swing.JFrame(), true) {
                    @Override
                    public void configTable() {
                        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    }
                };
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Criterio;
    private javax.swing.JTextField Filtro;
    private javax.swing.JTextField Id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jsTabela;
    private javax.swing.JTable jtTabela;
    // End of variables declaration//GEN-END:variables
}
